[{"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\index.js":"1","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\App.js":"2","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"3","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"4","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js":"6","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"7","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js":"8","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"9","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js":"10","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js":"11","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js":"12","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js":"13","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\api.js":"14","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js":"15","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"16","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js":"17","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"18","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"19","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js":"20","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js":"21","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"22","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"23","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js":"24","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js":"25","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"26","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\index.js":"27","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\App.js":"28","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\reportWebVitals.js":"29","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\context\\ThemeContext.js":"30","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\Home.js":"31","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js":"32","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\Result.js":"33","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js":"34","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js":"35","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"36","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\context\\ThemeDemo.js":"37","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js":"38","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"39","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"40","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\api.js":"41","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js":"42","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js":"43","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js":"44","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js":"45","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"46","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js":"47","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js":"48","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js":"49","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"50","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"51","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"52"},{"size":672,"mtime":1681746041384,"results":"53","hashOfConfig":"54"},{"size":1439,"mtime":1681746041378,"results":"55","hashOfConfig":"54"},{"size":9235,"mtime":1681746041496,"results":"56","hashOfConfig":"54"},{"size":375,"mtime":1681746046975,"results":"57","hashOfConfig":"54"},{"size":3056,"mtime":1681746041499,"results":"58","hashOfConfig":"54"},{"size":6300,"mtime":1701763018369,"results":"59","hashOfConfig":"54"},{"size":3411,"mtime":1690269942726,"results":"60","hashOfConfig":"54"},{"size":8583,"mtime":1681746046953,"results":"61","hashOfConfig":"54"},{"size":3990,"mtime":1690270311495,"results":"62","hashOfConfig":"54"},{"size":33777,"mtime":1681746046936,"results":"63","hashOfConfig":"54"},{"size":3782,"mtime":1690273208578,"results":"64","hashOfConfig":"54"},{"size":640,"mtime":1681746046869,"results":"65","hashOfConfig":"54"},{"size":4851,"mtime":1701763858803,"results":"66","hashOfConfig":"54"},{"size":481,"mtime":1717069363114,"results":"67","hashOfConfig":"54"},{"size":9367,"mtime":1681746046879,"results":"68","hashOfConfig":"54"},{"size":9082,"mtime":1708693049571,"results":"69","hashOfConfig":"54"},{"size":10012,"mtime":1713861489754,"results":"70","hashOfConfig":"54"},{"size":9166,"mtime":1681746046958,"results":"71","hashOfConfig":"54"},{"size":15117,"mtime":1688642133779,"results":"72","hashOfConfig":"54"},{"size":27205,"mtime":1681746046926,"results":"73","hashOfConfig":"54"},{"size":6712,"mtime":1681746046950,"results":"74","hashOfConfig":"54"},{"size":12356,"mtime":1713869942559,"results":"75","hashOfConfig":"54"},{"size":101260,"mtime":1681746046895,"results":"76","hashOfConfig":"54"},{"size":21086,"mtime":1713874963348,"results":"77","hashOfConfig":"54"},{"size":6508,"mtime":1681746046945,"results":"78","hashOfConfig":"54"},{"size":4318,"mtime":1681746046888,"results":"79","hashOfConfig":"54"},{"size":672,"mtime":1681746041384,"results":"80","hashOfConfig":"81"},{"size":1439,"mtime":1681746041378,"results":"82","hashOfConfig":"81"},{"size":375,"mtime":1681746046975,"results":"83","hashOfConfig":"81"},{"size":9235,"mtime":1681746041496,"results":"84","hashOfConfig":"81"},{"size":3411,"mtime":1690269942726,"results":"85","hashOfConfig":"81"},{"size":3782,"mtime":1690273208578,"results":"86","hashOfConfig":"81"},{"size":8583,"mtime":1681746046953,"results":"87","hashOfConfig":"81"},{"size":6300,"mtime":1701763018369,"results":"88","hashOfConfig":"81"},{"size":33777,"mtime":1681746046936,"results":"89","hashOfConfig":"81"},{"size":3990,"mtime":1690270311495,"results":"90","hashOfConfig":"81"},{"size":3056,"mtime":1681746041499,"results":"91","hashOfConfig":"81"},{"size":9367,"mtime":1681746046879,"results":"92","hashOfConfig":"81"},{"size":9166,"mtime":1681746046958,"results":"93","hashOfConfig":"81"},{"size":15117,"mtime":1688642133779,"results":"94","hashOfConfig":"81"},{"size":481,"mtime":1717069363114,"results":"95","hashOfConfig":"81"},{"size":10012,"mtime":1713861489754,"results":"96","hashOfConfig":"81"},{"size":27205,"mtime":1681746046926,"results":"97","hashOfConfig":"81"},{"size":6508,"mtime":1681746046945,"results":"98","hashOfConfig":"81"},{"size":6712,"mtime":1681746046950,"results":"99","hashOfConfig":"81"},{"size":9082,"mtime":1708693049571,"results":"100","hashOfConfig":"81"},{"size":640,"mtime":1681746046869,"results":"101","hashOfConfig":"81"},{"size":4851,"mtime":1701763858803,"results":"102","hashOfConfig":"81"},{"size":21086,"mtime":1713874963348,"results":"103","hashOfConfig":"81"},{"size":12356,"mtime":1713869942559,"results":"104","hashOfConfig":"81"},{"size":101260,"mtime":1681746046895,"results":"105","hashOfConfig":"81"},{"size":4318,"mtime":1681746046888,"results":"106","hashOfConfig":"81"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},"a70vdf",{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"110"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"110"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"110"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"mtivuq",{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\index.js",["228"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport ThemeContext from \"./../src/main/webapp/context/ThemeContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SimpleReactLightbox>\r\n      <BrowserRouter basename=\"/\">\r\n        <ThemeContext>\r\n          <App />\r\n        </ThemeContext>\r\n      </BrowserRouter>\r\n    </SimpleReactLightbox>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["229","230"],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\App.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js",["231","232","233","234","235"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ProgressBar from \"../SampleCollection/Progressbar\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ManifestPrint from \"./ManifestPrint\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport ConfigModal from \"../SampleCollection/ConfigModal\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst PrintManifest = (props) => {\r\n  let history = useHistory();\r\n  const sampleObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.sampleObj\r\n      : {};\r\n  //console.log(\"props\",sampleObj)\r\n  const classes = useStyles();\r\n\r\n  const [saved, setSaved] = useState(false);\r\n  const [localStore, SetLocalStore] = useState([]);\r\n  const [send, setSend] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [failed, setFailed] = useState(false);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const manifests = JSON.parse(localStorage.getItem(\"manifest\"));\r\n    if (manifests) {\r\n      SetLocalStore(manifests);\r\n      localStorage.removeItem(\"manifest\");\r\n    } else {\r\n      SetLocalStore(sampleObj);\r\n    }\r\n  }, []);\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n    handleOpen();\r\n    setProgress(10);\r\n  };\r\n\r\n  const handleProgress = (progessCount) => {\r\n    setProgress(progessCount);\r\n  };\r\n\r\n  const handleFailure = (status) => {\r\n    //setFailed(!failed);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Body>\r\n          {Object.keys(localStore).length === 0 ? (\r\n            <Alert\r\n              variant=\"danger\"\r\n              style={{ width: \"100%\", fontSize: \"18px\", textAlign: \"center\" }}\r\n            >\r\n              <b>Sample Manifest</b> not created yet. pls complete the manifest\r\n              form.\r\n            </Alert>\r\n          ) : (\r\n            <>\r\n              <p style={{ textAlign: \"right\" }}>\r\n                {localStore.manifestStatus === \"Ready\" ? (\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    className={classes.button}\r\n                    startIcon={<SendIcon />}\r\n                    disabled={!send ? false : true}\r\n                    onClick={sendManifest}\r\n                  >\r\n                    Send Manifest\r\n                  </MatButton>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  className={classes.button}\r\n                  startIcon={<PrintIcon />}\r\n                  disabled={!send ? false : true}\r\n                  onClick={handlePrint}\r\n                >\r\n                  Print\r\n                </MatButton>\r\n\r\n                <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{\r\n                      backgroundColor: \"rgb(153, 46, 98)\",\r\n                      color: \"#fff\",\r\n                    }}\r\n                    startIcon={<ReplyIcon />}\r\n                  >\r\n                    back\r\n                  </MatButton>\r\n                </Link>\r\n                <Link\r\n                  color=\"inherit\"\r\n                  to={{\r\n                    pathname: \"/result\",\r\n                    state: { manifestObj: localStore },\r\n                  }}\r\n                >\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    startIcon={<ListAltIcon />}\r\n                  >\r\n                    Results\r\n                  </MatButton>\r\n                </Link>\r\n              </p>\r\n              {progress !== 0 ? (\r\n                <>\r\n                  <span>Sending manifest to PCR Lab</span>\r\n                  <ProgressBar value={progress} />\r\n                </>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <ManifestPrint sampleObj={localStore} ref={componentRef} />\r\n            </>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n      {open ? (\r\n        <ConfigModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestsId={sampleObj.id}\r\n          saved={saved}\r\n          handleProgress={handleProgress}\r\n          handleFailure={handleFailure}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrintManifest;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["236","237","238"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\r\nimport SampleCollection from \"./SampleCollection/SamplesCollection\";\r\nimport SamplesTracker from \"./SampleCollection/SampleTracker\";\r\nimport ManifestList from \"./manifest/ManifestList\";\r\nimport { labObj } from \"./sampleObj\";\r\nimport Login from \"./SampleCollection/Login\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../api\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [key, setKey] = useState(\"manifest-list\");\r\n  const [config, setConfig] = useState({});\r\n\r\n  const urlTabs =\r\n    props.location && props.location.state ? props.location.state : null;\r\n  const [permissions, setPermissions] = useState([]);\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    userPermission();\r\n\r\n    switch (urlTabs) {\r\n      case \"existing-manifest\":\r\n        return setKey(\"manifest-list\");\r\n      case \"collect-sample\":\r\n        return setKey(\"collection\");\r\n      case \"config\":\r\n        return setKey(\"config\");\r\n      case \"sample-tracker\":\r\n        return setKey(\"tracker\");\r\n      default:\r\n        return setKey(\"manifest-list\");\r\n    }\r\n  }, [urlTabs]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Tab eventKey=\"manifest-list\" title=\"Manifest List\">\r\n                    <ManifestList config={config} setConfig={setConfig} />\r\n                  </Tab>\r\n                  {/* {permissions.includes(\"create_manifest\") ||\r\n                    (permissions.includes(\"all_permission\") && (\r\n                      <Tab eventKey=\"collection\" title=\"Create Manifest\">\r\n                        <SampleCollection />\r\n                      </Tab>\r\n                    ))} */}\r\n                  {/* {permissions.includes(\"create_manifest\") || permissions.includes(\"view_manifest\") ||\r\n                    (permissions.includes(\"all_permission\") && ( */}\r\n                  <Tab eventKey=\"tracker\" title=\"Samples Tracker\">\r\n                    <SamplesTracker />\r\n                  </Tab>\r\n                  {/* ))} */}\r\n                  {permissions.includes(\"set_configuration\") ||\r\n                    (permissions.includes(\"all_permission\") && (\r\n                      <Tab eventKey=\"config\" title=\"Configuration\">\r\n                        <Login\r\n                          setKey={setKey}\r\n                          config={config}\r\n                          setConfig={setConfig}\r\n                        />\r\n                      </Tab>\r\n                    ))}\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js",["239","240","241"],"import React, { useEffect, useCallback, useState, useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport AddResultModal from \"./AddResultModal\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport CachedIcon from \"@mui/icons-material/Cached\";\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport PrintResults from \"./PrintResults\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Result = (props) => {\r\n  let history = useHistory();\r\n  const manifestObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.manifestObj\r\n      : {};\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(true);\r\n  const [results, setResults] = useState([]);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      localStorage.setItem(\"configId\", JSON.stringify(response.data.id));\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const componentRef = useRef();\r\n\r\n  const loadResults = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/results/manifests/${manifestObj.id}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setResults(response.data.results);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  }, [manifestObj.id]);\r\n\r\n  const getPCResults = useCallback(async () => {\r\n    try {\r\n      const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n      setResults([]);\r\n      if (manifestObj.id !== 0) {\r\n        const response = await axios.get(\r\n          `${url}lims/manifest-results/${manifestObj.id}/${serverId}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        console.log(\"lims\", response.data.viralLoadTestReport);\r\n        if (response.data.viralLoadTestReport !== null) {\r\n          setResults(response.data.viralLoadTestReport);\r\n\r\n          response.data.viralLoadTestReport.forEach((d) => {\r\n            if (d.approvalDate !== \"\" && d.testResult !== \"\") {\r\n              let result = {\r\n                manifestRecordID: manifestObj.id,\r\n                dateResultDispatched: d.dateResultDispatched,\r\n                dateSampleReceivedAtPcrLab: d.dateSampleReceivedAtPcrLab,\r\n                testResult: d.testResult,\r\n                resultDate: d.resultDate,\r\n                pcrLabSampleNumber: d.pcrLabSampleNumber,\r\n                approvalDate: d.approvalDate,\r\n                assayDate: d.assayDate,\r\n                sampleTestable: d.sampleTestable,\r\n                sampleStatus: d.sampleStatus,\r\n                sampleID: d.sampleID,\r\n                uuid: \"\",\r\n                visitDate: d.visitDate,\r\n                transferStatus: d.transferStatus,\r\n                testedBy: d.transferStatus,\r\n                approvedBy: d.approvedBy,\r\n                dateTransferredOut: d.dateTransferredOut,\r\n                reasonNotTested: d.reasonNotTested,\r\n                otherRejectionReason: d.otherRejectionReason,\r\n                sendingPCRLabID: d.sendingPCRLabID,\r\n                sendingPCRLabName: d.sendingPCRLabName,\r\n              };\r\n              console.log(\"payload\", result);\r\n              axios\r\n                .post(`${url}lims/results`, [result], {\r\n                  headers: { Authorization: `Bearer ${token}` },\r\n                })\r\n                .then((resp) => {\r\n                  //console.log(\"results saved\", resp)\r\n                });\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        toast.success(\r\n          \"Sample results are currently been processed, check back in a bit\",\r\n          {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          }\r\n        );\r\n      }\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.log(e.message);\r\n    }\r\n  }, [manifestObj.id]);\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n    loadResults();\r\n    getPCResults();\r\n  }, [loadConfig, loadResults, getPCResults]);\r\n\r\n  const reload = (e) => {\r\n    getPCResults();\r\n  };\r\n\r\n  // const handlePrint = useReactToPrint({\r\n  //   content: () => componentRef.current,\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          {results.length === 0 ? (\r\n            <p>\r\n              <CircularProgress color=\"primary\" /> connecting to LIMS server...\r\n            </p>\r\n          ) : (\r\n            \" \"\r\n          )}\r\n          <p style={{ textAlign: \"right\" }}>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"dark\"\r\n              className={classes.button}\r\n              startIcon={<AddIcon />}\r\n              onClick={handleOpen}\r\n            >\r\n              Add Result\r\n            </MatButton>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<CachedIcon />}\r\n              onClick={reload}\r\n            >\r\n              Refresh\r\n            </MatButton>\r\n            {/* <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<PrintIcon />}\r\n              onClick={handlePrint}\r\n            >\r\n              Print\r\n            </MatButton> */}\r\n\r\n            <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n              <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{\r\n                  backgroundColor: \"rgb(153, 46, 98)\",\r\n                  color: \"#fff\",\r\n                }}\r\n                startIcon={<ReplyIcon />}\r\n              >\r\n                back\r\n              </MatButton>\r\n            </Link>\r\n          </p>\r\n          <hr />\r\n          {\r\n            <>\r\n              <Alert\r\n                style={{\r\n                  width: \"100%\",\r\n                  fontSize: \"20px\",\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Alert.Heading>PCR Sample Results</Alert.Heading>\r\n              </Alert>\r\n              <br />\r\n              <PrintResults\r\n                manifestObj={manifestObj}\r\n                results={results}\r\n                ref={componentRef}\r\n              />\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n      {open ? (\r\n        <AddResultModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestObj={manifestObj}\r\n          results={results}\r\n          reload={reload}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js",["242","243","244","245","246","247","248"],"import React, { useEffect, useCallback, useState, useRef } from \"react\";\r\n\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport AddResultModal from \"./AddResultModal\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport CachedIcon from \"@mui/icons-material/Cached\";\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport PatientResult from \"./PatientResult\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst PatientResultPrint = (props) => {\r\n  const location = useLocation();\r\n\r\n  const patientResults = location && location.state ? location.state.data : {};\r\n\r\n  //console.log(patientResults)\r\n\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n\r\n  const componentRef = useRef();\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/manifest-samples-info-by-sampleid/${patientResults.sampleID}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      console.log(response);\r\n      setPatientInfo(response.data);\r\n    } catch (e) {\r\n      console.err(e);\r\n    }\r\n  }, [patientResults.sampleID]);\r\n\r\n  useEffect(() => {\r\n    loadInfo();\r\n  }, [loadInfo]);\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <p style={{ textAlign: \"right\" }}>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              startIcon={<PrintIcon />}\r\n              onClick={handlePrint}\r\n            >\r\n              Print\r\n            </MatButton>{\" \"}\r\n            <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n              <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{\r\n                  backgroundColor: \"rgb(153, 46, 98)\",\r\n                  color: \"#fff\",\r\n                }}\r\n                startIcon={<ReplyIcon />}\r\n              >\r\n                back\r\n              </MatButton>\r\n            </Link>\r\n          </p>\r\n          <hr />\r\n          {\r\n            <>\r\n              <br />\r\n              <PatientResult samples={patientInfo} ref={componentRef} />\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientResultPrint;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js",["249"],"import PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js",["250","251","252","253","254","255","256","257","258","259","260","261","262"],"import React, { useState, forwardRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../../api\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Badge } from \"reactstrap\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers-pro\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers-pro/AdapterDayjs\";\r\nimport { DateRangePicker } from \"@mui/x-date-pickers-pro/DateRangePicker\";\r\nimport DownloadIcon from \"@mui/icons-material/Download\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst SampleTracker = () => {\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [value, setValue] = React.useState([null, null]);\r\n\r\n  let start_date = value[0] != null ? value[0].$d : null;\r\n  let end_date = value[1] != null ? value[1].$d : null;\r\n\r\n  const handleDownload = () => {\r\n    if (start_date != null) {\r\n      start_date = new Date(start_date);\r\n    }\r\n    if (end_date != null) {\r\n      end_date = new Date(end_date);\r\n    }\r\n\r\n    console.log(\"report\", start_date, end_date);\r\n  };\r\n\r\n  const sampleStatus = (e) => {\r\n    //console.log(e)\r\n    if (parseInt(e) === 1) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"success\">Result available</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 2) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"danger\">Rejected</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 3) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"info\">In-Progress</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 4) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"warning\">Re-Run</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 5) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"warning\">Transferred</Badge>\r\n        </p>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>\r\n          <Badge color=\"dark\">Result Pending</Badge>\r\n        </p>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlePulledData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${url}lims/manifests-all-in-one-drkarim?searchParam=${query.search}&pageNo=${query.page}&pageSize=${query.pageSize}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((resp) => resp)\r\n        .then((result) => {\r\n          if (result.data.records === null) {\r\n            resolve({\r\n              data: [],\r\n              page: 0,\r\n              totalCount: 0,\r\n            });\r\n          } else {\r\n            resolve({\r\n              data: result.data.records.map((row) => ({\r\n                manifestId: row.manifestID,\r\n                patientId: row.patientID[0].idNumber,\r\n                sampleId: row.sampleID,\r\n                sampleType: row.sampleType,\r\n                orderBy: row.sampleOrderedBy,\r\n                sampleOrderDate: row.sampleOrderDate,\r\n                sampleCollectedBy: row.sampleCollectedBy,\r\n                sampleCollectionDate: row.sampleCollectionDate,\r\n                dateSampleSent: row.dateSampleSent,\r\n                lab: row.receivingLabName,\r\n                pcr_no: row.pcrLabSampleNumber,\r\n                status:\r\n                  row.manifestStatus === \"Ready\" ? (\r\n                    <Badge color=\"secondary\">Not Submitted</Badge>\r\n                  ) : (\r\n                    <Badge\r\n                      color=\"#013220\"\r\n                      style={{ backgroundColor: \"#006400\", color: \"#fff\" }}\r\n                    >\r\n                      Submitted\r\n                    </Badge>\r\n                  ),\r\n                resultDate: row.resultDate,\r\n                approvalDate: row.approvalDate,\r\n                assayDate: row.assayDate,\r\n                tested_by: row.testedBy,\r\n                approved_by: row.approvedBy,\r\n                receivedDate: row.dateResultDispatched,\r\n                testResult:\r\n                  row.testResult !== null ? `${row.testResult} cp\\mL` : \"\",\r\n              })),\r\n              page: query.page,\r\n              totalCount: result.data.totalRecords,\r\n            });\r\n          }\r\n        });\r\n    });\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      {/* <Grid container spacing={2}>\r\n          <LocalizationProvider\r\n              dateAdapter={AdapterDayjs}\r\n              localeText={{ start: \"Start-Date\", end: \"End-Date\" }}\r\n            >\r\n              <DateRangePicker\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                  setValue(newValue);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <TextField {...startProps} />\r\n                    <Box sx={{ mx: 2 }}> to </Box>\r\n                    <TextField {...endProps} />\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n          </Grid> */}\r\n      <hr />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"PCR Sample Tracker\"\r\n        columns={[\r\n          { title: \"Status\", field: \"status\" },\r\n          { title: \"Manifest Id\", field: \"manifestId\" },\r\n          { title: \"Patient Id\", field: \"patientId\" },\r\n          { title: \"Sample Id\", field: \"sampleId\" },\r\n          { title: \"Sample Type\", field: \"sampleType\" },\r\n          { title: \"Order by\", field: \"orderBy\" },\r\n          { title: \"Order Date\", field: \"sampleOrderDate\" },\r\n          { title: \"Collected By\", field: \"sampleCollectedBy\" },\r\n          { title: \"Collection Date\", field: \"sampleCollectionDate\" },\r\n          { title: \"Date Sent\", field: \"dateSampleSent\" },\r\n          { title: \"PCR_Lab\", field: \"lab\" },\r\n          { title: \"PCR_No\", field: \"pcr_no\" },\r\n\r\n          { title: \"Result Date\", field: \"resultDate\" },\r\n          { title: \"Approval Date\", field: \"approvalDate\" },\r\n          { title: \"Assay_Date\", field: \"assayDate\" },\r\n          { title: \"Tested By\", field: \"tested_by\" },\r\n          { title: \"Approved By\", field: \"approved_by\" },\r\n          { title: \"Receive Date\", field: \"receivedDate\" },\r\n          { title: \"Sample Result\", field: \"testResult\" },\r\n        ]}\r\n        isLoading={loading}\r\n        data={handlePulledData}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            fontSize: \"16px\",\r\n            padding: \"10px\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          selection: false,\r\n          filtering: false,\r\n          exportButton: true,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        localization={localization}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SampleTracker;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["263","264","265","266"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst ConfigModal = (props) => {\r\n  const { manifestsId } = props;\r\n\r\n  const classes = useStyles();\r\n  const [saved, setSaved] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [logins, setLogins] = useState({});\r\n\r\n  const [configId, setConfigId] = useState(0);\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setLogins(response.data);\r\n      localStorage.setItem(\"configId\", JSON.stringify(response.data.id));\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n  }, [loadConfig]);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setConfigId(parseInt(value));\r\n    setSaved(true);\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n    //console.log(configId)\r\n    //setSaved(true);\r\n    toast.success(\"Sample manifest saved successfully!!\", {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n    });\r\n\r\n    props.togglestatus();\r\n  };\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const timer = setInterval(() => {\r\n      props.handleProgress((prevProgress) =>\r\n        prevProgress >= 100 ? 100 : prevProgress + 2\r\n      );\r\n    }, 500);\r\n\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n    props.togglestatus();\r\n    try {\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          if (resp) {\r\n            console.log(\"sending manifest\", resp);\r\n            props.handleProgress(100);\r\n\r\n            toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n\r\n            props.submitted(2);\r\n            props.previous(0);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          clearInterval(timer);\r\n          console.log(\"err\", err);\r\n          toast.error(\"Poor Internet Connection....\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      //props.setFailed(true);\r\n\r\n      clearInterval(timer);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  const resendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    props.handleProgress(20);\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n    try {\r\n      props.handleProgress(50);\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          props.handleProgress(70);\r\n\r\n          if (resp) {\r\n            console.log(\"re sending manifest\", resp);\r\n            props.handleProgress(100);\r\n          }\r\n\r\n          toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          props.handleProgress(10);\r\n\r\n          toast.success(\"Server currently down!!! Try sending manifest later\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          props.handleProgress(0);\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      props.handleProgress(10);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}></ModalHeader>\r\n              <ModalBody>\r\n                {props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label for=\"configName\" className={classes.label}>\r\n                            Which PCR Server are you sending to?\r\n                          </Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"config\"\r\n                            id=\"config\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option hidden>Select Server</option>\r\n                            {\r\n                              <option key={1} value={logins.id}>\r\n                                {logins.configName}\r\n                              </option>\r\n                            }\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col></Col>\r\n                    </Row>\r\n\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={sendManifest}\r\n                      disabled={saved ? false : true}\r\n                    >\r\n                      Send\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n\r\n                {!props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      disabled={loading}\r\n                      onClick={saveSample}\r\n                    >\r\n                      Save\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={resendManifest}\r\n                    >\r\n                      Re-send\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"default\"\r\n                      onClick={props.togglestatus}\r\n                      className={classes.button}\r\n                      startIcon={<CancelIcon />}\r\n                    >\r\n                      Cancel\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigModal;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js",["267","268"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport AddCardIcon from \"@mui/icons-material/AddCard\";\r\n\r\nimport SplitActionButton from \"../SampleCollection/SplitActionButton\";\r\n\r\nimport { Badge } from \"reactstrap\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { FaEye } from \"react-icons/fa\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst DownloadManifest = (props) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        //console.log(\"permission\", response.data.permissions)\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      console.log(\"configs\", response);\r\n      props.setConfig(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(\"true\");\r\n    loadConfig();\r\n    userPermission();\r\n  }, [loadConfig]);\r\n\r\n  const actionItems = (row) => {\r\n    return [\r\n      {\r\n        name: \"View\",\r\n        type: \"link\",\r\n        icon: <FaEye size=\"22\" />,\r\n        to: {\r\n          pathname: \"/print-manifest\",\r\n          state: { sampleObj: row, permissions: permissions },\r\n        },\r\n      },\r\n      {\r\n        ...(row.manifestStatus === \"Ready\"\r\n          ? \" \"\r\n          : {\r\n              name: \" Results\",\r\n              type: \"link\",\r\n              icon: <FaEye size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n              to: {\r\n                pathname: \"/result\",\r\n                state: { manifestObj: row, permissions: permissions },\r\n              },\r\n            }),\r\n      },\r\n      {\r\n        ...(row.manifestStatus === \"Ready\"\r\n          ? \" \"\r\n          : {\r\n              name: \"Add RSL Result\",\r\n              type: \"link\",\r\n              icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n              to: {\r\n                pathname: \"/add-result\",\r\n                state: { manifestObj: row, permissions: permissions },\r\n              },\r\n            }),\r\n      },\r\n    ];\r\n  };\r\n\r\n  const handlePulledData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${url}lims/manifests?searchParam=${query.search}&pageNo=${query.page}&pageSize=${query.pageSize}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((resp) => resp)\r\n        .then((result) => {\r\n          if (result.data.records === null) {\r\n            resolve({\r\n              data: [],\r\n              page: 0,\r\n              totalCount: 0,\r\n            });\r\n          } else {\r\n            resolve({\r\n              data: result.data.records.map((row) => ({\r\n                manifestId: row.manifestID,\r\n                pickupDate: row.dateScheduledForPickup.replace(\"T\", \" \"),\r\n                createDate: row.createDate.replace(\"T\", \" \"),\r\n                lab: row.receivingLabName,\r\n                packaged_by: row.samplePackagedBy,\r\n                samples: row.sampleInformation.length,\r\n                results:\r\n                  row.results.length !== 0 ? (\r\n                    <Badge color=\"info\">{row.results.length}</Badge>\r\n                  ) : (\r\n                    0\r\n                  ),\r\n                status:\r\n                  row.manifestStatus === \"Ready\" ? (\r\n                    <Badge color=\"secondary\">Not Submitted</Badge>\r\n                  ) : (\r\n                    <Badge\r\n                      color=\"#013220\"\r\n                      style={{ backgroundColor: \"#006400\", color: \"#fff\" }}\r\n                    >\r\n                      {row.manifestStatus}\r\n                    </Badge>\r\n                  ),\r\n                actions: (\r\n                  <>\r\n                    <SplitActionButton actions={actionItems(row)} />\r\n                  </>\r\n                ),\r\n              })),\r\n              page: query.page,\r\n              totalCount: result.data.totalRecords,\r\n            });\r\n          }\r\n        });\r\n    });\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {Object.keys(props.config).length !== 0 ? (\r\n          <p style={{ textAlign: \"right\" }}>\r\n            <Link color=\"inherit\" to={{ pathname: \"/create-manifest\" }}>\r\n              <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddCardIcon />}\r\n                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n              >\r\n                Create Manifest\r\n              </MatButton>\r\n            </Link>\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"Previous Manifests\"\r\n          columns={[\r\n            { title: \"Manifest Id\", field: \"manifestId\" },\r\n            { title: \"Pickup Date\", field: \"pickupDate\" },\r\n            { title: \"Created Date\", field: \"createDate\" },\r\n            { title: \"Receiving Lab\", field: \"lab\" },\r\n            { title: \"Packaged By\", field: \"packaged_by\" },\r\n            { title: \"Total Samples\", field: \"samples\" },\r\n            { title: \"Total Results\", field: \"results\" },\r\n            { title: \"Status\", field: \"status\" },\r\n            { title: \"Action\", field: \"actions\" },\r\n          ]}\r\n          isLoading={loading}\r\n          data={handlePulledData}\r\n          options={{\r\n            headerStyle: {\r\n              backgroundColor: \"#014d88\",\r\n              color: \"#fff\",\r\n              fontSize: \"16px\",\r\n              padding: \"10px\",\r\n            },\r\n            searchFieldStyle: {\r\n              width: \"200%\",\r\n              margingLeft: \"250px\",\r\n            },\r\n            selection: false,\r\n            filtering: false,\r\n            exportButton: false,\r\n            searchFieldAlignment: \"left\",\r\n            pageSizeOptions: [10, 20, 100],\r\n            pageSize: 10,\r\n            debounceInterval: 400,\r\n          }}\r\n          onChangePage={handleChangePage}\r\n          localization={localization}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DownloadManifest;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["269"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport { Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nimport \"./sample.css\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  let history = useHistory();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [demo, setDemo] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(true);\r\n  const [login, setLogin] = useState({\r\n    configName: \"\",\r\n    serverUrl: \"\",\r\n    configEmail: \"\",\r\n    configPassword: \"\",\r\n    testFacilityDATIMCode: \"\",\r\n    testFacilityName: \"\",\r\n  });\r\n\r\n  const [logins, setLogins] = useState({});\r\n  const [facilities, setFacilities] = useState([]);\r\n\r\n  const Facilities = () => {\r\n    axios\r\n      .get(`${url}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setFacilities(response.data.applicationUserOrganisationUnits);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const loadServerDetails = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setLogins(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Facilities();\r\n    loadServerDetails();\r\n  }, [loadServerDetails]);\r\n\r\n  const getFacilityDatim = (facilityId) => {\r\n    console.log(facilityId);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    //console.log(name, value)\r\n    if (name === \"testFacilityName\") {\r\n      getFacilityDatim(value);\r\n    }\r\n\r\n    if (name === \"configName\" && value === \"Server\") {\r\n      setDemo(true);\r\n    } else if (name === \"configName\" && value === \"Live Server\") {\r\n      setDemo(false);\r\n    }\r\n    setLogin({ ...login, [name]: value });\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.configName = login.configName ? \"\" : \"Server Name is required.\";\r\n    temp.serverUrl = login.serverUrl ? \"\" : \"Server URL is required.\";\r\n    temp.configEmail = login.configEmail ? \"\" : \"Email is required.\";\r\n    temp.configPassword = login.configPassword\r\n      ? \"\"\r\n      : \"Configuration password URL is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (validateInputs()) {\r\n        await axios\r\n          .post(`${url}lims/config`, login, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((resp) => {\r\n            console.log(\"login details\", resp);\r\n            props.setConfig(resp.data);\r\n            toast.success(\"LIMS Credentials saved successfully!!\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n\r\n            setLogin({\r\n              configName: \"\",\r\n              serverUrl: \"\",\r\n              configEmail: \"\",\r\n              configPassword: \"\",\r\n              facilityId: \"\",\r\n              receivingPCRLabId: \"\",\r\n            });\r\n          });\r\n\r\n        loadServerDetails();\r\n        props.setKey(\"manifest-list\");\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while saving LIMS Credentials\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const deleteConfig = async (e, id) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.delete(`${url}lims/config/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      console.log(\" delete config\", response);\r\n      loadServerDetails();\r\n      props.setConfig({});\r\n      toast.success(\"LIMS Credentials deleted successfully!!\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while deleting a config\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <hr />\r\n          {\r\n            <>\r\n              <Alert\r\n                style={{\r\n                  width: \"100%\",\r\n                  fontSize: \"16px\",\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Alert.Heading>LIMS Configuration Details</Alert.Heading>\r\n              </Alert>\r\n\r\n              <Row>\r\n                <Col xs={6} md={4}>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label for=\"configName\" className={classes.label}>\r\n                        Server Name\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        name=\"configName\"\r\n                        value={login.configName}\r\n                        id=\"configName\"\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option hidden>Select Configuration Server</option>\r\n                        <option value=\"Server\">LIMS Server</option>\r\n                        {/* <option value=\"Live Server\">Live Server</option> */}\r\n                      </select>\r\n\r\n                      {errors.configName !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configName}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"serverUrl\" className={classes.label}>\r\n                        LIMS URL\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"serverUrl\"\r\n                        id=\"serverUrl\"\r\n                        placeholder=\"Server URL\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.serverUrl}\r\n                      />\r\n                      {errors.serverUrl !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.serverUrl}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"configEmail\" className={classes.label}>\r\n                        LIMS Username\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"configEmail\"\r\n                        id=\"configEmail\"\r\n                        placeholder=\"LIMS Username\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configEmail}\r\n                      />\r\n                      {errors.configEmail !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configEmail}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                      <Label for=\"configPassword\" className={classes.label}>\r\n                        LIMS Password\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"password\"\r\n                        name=\"configPassword\"\r\n                        id=\"configPassword\"\r\n                        placeholder=\"configuration password\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configPassword}\r\n                      />\r\n\r\n                      {errors.configPassword !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configPassword}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    {demo === true ? (\r\n                      <>\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityName\"\r\n                            className={classes.label}\r\n                          >\r\n                            Facility Name\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"testFacilityName\"\r\n                            id=\"testFacilityName\"\r\n                            onChange={handleChange}\r\n                            style={{\r\n                              border: \"1px solid #014d88\",\r\n                              borderRadius: \"0px\",\r\n                              fontSize: \"14px\",\r\n                              color: \"#000\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            {facilities.map((value) => (\r\n                              <option\r\n                                key={value.id}\r\n                                value={value.organisationUnitName}\r\n                              >\r\n                                {value.organisationUnitName}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n\r\n                          {/* <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityName\"\r\n                            id=\"testFacilityName\"\r\n                            placeholder=\"Testing Facility Name\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityName}\r\n                          /> */}\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityDATIMCode\"\r\n                            className={classes.label}\r\n                          >\r\n                            Facility Datim Code\r\n                          </Label>\r\n\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityDATIMCode\"\r\n                            id=\"testFacilityDATIMCode\"\r\n                            placeholder=\"Testing Facility Datim Code\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityDATIMCode}\r\n                          />\r\n                        </FormGroup>\r\n                      </>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      startIcon={<SaveIcon />}\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form>\r\n                </Col>\r\n                <Col xs={6} md={8}>\r\n                  <Table bordered size=\"sm\" responsive>\r\n                    <thead\r\n                      style={{\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th>S/N</th>\r\n                        <th>Server Name</th>\r\n                        <th>URL</th>\r\n                        <th>Email</th>\r\n                        {/*<th>Created Date</th>*/}\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody style={{ textAlign: \"center\" }}>\r\n                      <tr key={logins.id}>\r\n                        <td>{logins.id}</td>\r\n                        <td>{logins.configName}</td>\r\n                        <td>{logins.serverUrl}</td>\r\n                        <td>{logins.configEmail}</td>\r\n                        {/*<td>09/09/2022</td>*/}\r\n                        <td>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            startIcon={<DeleteIcon />}\r\n                            onClick={(e) => deleteConfig(e, logins.id)}\r\n                          ></Button>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js",["270","271","272"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Alert,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { pcr_lab } from \"../SampleCollection/pcr\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  arial: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"15px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  modalStyle1: {\r\n    position: \"absolute\",\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst AddResultModal = (props) => {\r\n  const classes = useStyles();\r\n  const { manifestObj, reload } = props;\r\n  //console.log(\"main\", manifestObj)\r\n\r\n  const sampleIDs = [];\r\n  manifestObj.sampleInformation.forEach((e) => {\r\n    sampleIDs.push(e);\r\n  });\r\n\r\n  const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\" });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [tests, setTests] = useState(false);\r\n  const [transferredOut, setTransferredOut] = useState(false);\r\n  const [reasons, setReasons] = useState(false);\r\n  const [reasonsNot, setReasonsNot] = useState(false);\r\n  const [transferredStatus, setTransferredStatus] = useState(false);\r\n  const [inputFields, setInputFields] = useState({\r\n    manifestRecordID: manifestObj.id,\r\n    //id: 0,\r\n    dateResultDispatched: \"\",\r\n    dateSampleReceivedAtPcrLab: \"\",\r\n    testResult: \"\",\r\n    resultDate: \"\",\r\n    pcrLabSampleNumber: \"\",\r\n    approvalDate: \"\",\r\n    assayDate: \"\",\r\n    sampleTestable: \"\",\r\n    sampleStatus: \"\",\r\n    sampleID: \"\",\r\n    uuid: \"\",\r\n    visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n    transferStatus: \"\",\r\n    testedBy: \"\",\r\n    approvedBy: \"\",\r\n    dateTransferredOut: \"\",\r\n    reasonNotTested: \"\",\r\n    otherRejectionReason: \"\",\r\n    sendingPCRLabID: \"\",\r\n    sendingPCRLabName: \"\",\r\n  });\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const checkPCRLab = (name) => {\r\n    pcr_lab.forEach((val) => {\r\n      if (val.name === name) {\r\n        setPcrLabCode({ name: val.name, labNo: val.labNo });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { name, value } = event.target;\r\n    console.log(name, value);\r\n\r\n    if (name === \"sendingPCRLabName\") {\r\n      checkPCRLab(value);\r\n      console.log(pcrLabCode.labNo);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"2\") {\r\n      setReasonsNot(true);\r\n      setTransferredStatus(false);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"5\") {\r\n      setTransferredStatus(true);\r\n      setReasonsNot(false);\r\n    }\r\n\r\n    if (\r\n      (name === \"transferStatus\" && value === \"2\") ||\r\n      (name === \"transferStatus\" && value === \"3\") ||\r\n      (name === \"transferStatus\" && value === \"4\")\r\n    ) {\r\n      setTests(true);\r\n      setTransferredOut(true);\r\n    } else if (name === \"transferStatus\" && value === \"1\") {\r\n      setTests(false);\r\n      setTransferredOut(false);\r\n    }\r\n\r\n    if (name === \"reasonNotTested\" && value === \"7\") {\r\n      setReasons(true);\r\n    }\r\n\r\n    setInputFields({ ...inputFields, [name]: value });\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      console.log(inputFields);\r\n\r\n      await axios\r\n        .post(`${url}lims/results`, [inputFields], {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(\"results\", resp);\r\n\r\n          toast.success(\"PCR Sample results added successfully!!\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          setInputFields({\r\n            dateResultDispatched: \"\",\r\n            dateSampleReceivedAtPcrLab: \"\",\r\n            testResult: \"\",\r\n            resultDate: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            approvalDate: \"\",\r\n            assayDate: \"\",\r\n            sampleTestable: \"\",\r\n            sampleStatus: \"\",\r\n            sampleID: \"\",\r\n            uuid: \"\",\r\n            visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n          });\r\n        });\r\n      //history.push(\"/\");\r\n      props.togglestatus();\r\n      reload();\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while adding PCR Sample results\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}>\r\n                {sampleIDs\r\n                  .filter((key) => key.sampleID === inputFields.sampleID)\r\n                  .map((x) => (\r\n                    <Alert\r\n                      color=\"primary\"\r\n                      style={{ color: \"#000\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      <p style={{ marginTop: \".7rem\" }}>\r\n                        Name:{\" \"}\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {x.firstName + \" \" + x.surName + \" \"}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Patient ID::\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.patientID[0].idNumber}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleType}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Date collected :\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectionDate}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Sample collected By:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectedBy}\r\n                        </span>\r\n                      </p>\r\n                    </Alert>\r\n                  ))}\r\n              </ModalHeader>\r\n\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateResultDispatched\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Result Dispatched <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateResultDispatched\"\r\n                        id=\"dateResultDispatched\"\r\n                        min={manifestObj.createDate.slice(0, 10)}\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateResultDispatched}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateSampleReceivedAtPcrLab\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Sample Received at PCR Lab <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateSampleReceivedAtPcrLab\"\r\n                        id=\"dateSampleReceivedAtPcrLab\"\r\n                        min={manifestObj.createDate.slice(0, 10)}\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateSampleReceivedAtPcrLab}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleID\" className={classes.label}>\r\n                        Sample ID <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleID\"\r\n                        id=\"sampleID\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleID}\r\n                      >\r\n                        <option hidden>Select Sample Id</option>\r\n                        {sampleIDs &&\r\n                          sampleIDs.map((sample, i) => (\r\n                            <option key={i} value={sample.sampleID}>\r\n                              {sample.sampleID}\r\n                            </option>\r\n                          ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"surName\" className={classes.label}>\r\n                        Sample Testable <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleTestable\"\r\n                        id=\"sampleTestable\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleTestable}\r\n                      >\r\n                        <option hidden>Is Sample Testable ?</option>\r\n                        <option value=\"true\">True</option>\r\n                        <option value=\"false\">False</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvedBy\" className={classes.label}>\r\n                        Approved By*\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"approvedBy\"\r\n                        id=\"approvedBy\"\r\n                        placeholder=\"approvedBy\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvalDate\" className={classes.label}>\r\n                        Approval Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"approvalDate\"\r\n                        id=\"approvalDate\"\r\n                        placeholder=\"Approval Date\"\r\n                        min={manifestObj.createDate.slice(0, 10)}\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvalDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleStatus\" className={classes.label}>\r\n                        Sample Status <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleStatus\"\r\n                        id=\"sampleStatus\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleStatus}\r\n                      >\r\n                        <option hidden>Select Sample status</option>\r\n                        <option value=\"1\">Completed</option>\r\n                        <option value=\"2\">Rejected</option>\r\n                        <option value=\"3\">In-Progress</option>\r\n                        <option value=\"4\">Re-run</option>\r\n                        <option value=\"5\">Transferred</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"pcrLabSampleNumber\" className={classes.label}>\r\n                        Pcr Lab Sample No <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"pcrLabSampleNumber\"\r\n                        id=\"pcrLabSampleNumber\"\r\n                        placeholder=\"Pcr Lab Sample Number\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.pcrLabSampleNumber}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  {transferredStatus ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"transferStatus\" className={classes.label}>\r\n                          Transfer Status\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"transferStatus\"\r\n                          id=\"transferStatus\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.transferStatus}\r\n                        >\r\n                          <option hidden>Select transfer status</option>\r\n                          <option value=\"1\">Not Transferred</option>\r\n                          <option value=\"2\">Received</option>\r\n                          <option value=\"3\">In Process</option>\r\n                          <option value=\"4\">Tested</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {transferredOut === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"dateTransferredOut\"\r\n                          className={classes.label}\r\n                        >\r\n                          Date Transferred Out\r\n                        </Label>\r\n\r\n                        <Input\r\n                          type=\"date\"\r\n                          name=\"dateTransferredOut\"\r\n                          id=\"dateTransferredOut\"\r\n                          placeholder=\"Date Transferred Out\"\r\n                          min={manifestObj.createDate.slice(0, 10)}\r\n                          max={new Date().toISOString().slice(0, 10)}\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.dateTransferredOut}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n\r\n                  {reasonsNot ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"reasonNotTested\" className={classes.label}>\r\n                          Reason Not Tested\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"reasonNotTested\"\r\n                          id=\"reasonNotTested\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.reasonNotTested}\r\n                        >\r\n                          <option hidden>\r\n                            What is the reasons not tested?\r\n                          </option>\r\n                          <option value=\"1\">Testable</option>\r\n                          <option value=\"2\">Technical Problems</option>\r\n                          <option value=\"3\">Labeled Improperly</option>\r\n                          <option value=\"4\">Insufficient Blood</option>\r\n                          <option value=\"5\">Layered or clotted</option>\r\n                          <option value=\"6\">Improper Packaging</option>\r\n                          <option value=\"7\">Other Reasons</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Row>\r\n\r\n                <Row>\r\n                  {reasons === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"otherRejectionReason\"\r\n                          className={classes.label}\r\n                        >\r\n                          Other Rejection Reason\r\n                        </Label>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"otherRejectionReason\"\r\n                          id=\"otherRejectionReason\"\r\n                          placeholder=\"Other Rejection Reason\"\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.otherRejectionReason}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                </Row>\r\n\r\n                {tests === true ? (\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"sendingPCRLabName\"\r\n                          className={classes.label}\r\n                        >\r\n                          Transferred PCR Lab Name\r\n                        </Label>\r\n\r\n                        <select\r\n                          className=\"form-control\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          name=\"sendingPCRLabName\"\r\n                          value={pcrLabCode.name}\r\n                          id=\"sendingPCRLabName\"\r\n                          onChange={(e) => handleChange(e)}\r\n                        >\r\n                          <option>Select PCR Lab</option>\r\n                          {pcr_lab.map((value, i) => (\r\n                            <option key={i} value={value.name}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"sendingPCRLabID\" className={classes.label}>\r\n                          Transferred PCR Lab ID\r\n                        </Label>\r\n                        &nbsp;&nbsp;\r\n                        <span>\r\n                          <b>\r\n                            {pcrLabCode.labNo\r\n                              ? \"Confirm PCR Id \" + pcrLabCode.labNo\r\n                              : \"\"}\r\n                          </b>\r\n                        </span>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"sendingPCRLabID\"\r\n                          id=\"sendingPCRLabID\"\r\n                          placeholder=\"Transferred PCR Lab ID\"\r\n                          value={inputFields.sendingPCRLabID}\r\n                          className={classes.input}\r\n                          onChange={(e) => handleChange(e)}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <Row>\r\n                  <Col>\r\n                    {\" \"}\r\n                    <FormGroup>\r\n                      <Label for=\"assayDate\" className={classes.label}>\r\n                        Assay Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"assayDate\"\r\n                        id=\"assayDate\"\r\n                        placeholder=\"Assay Date\"\r\n                        min={manifestObj.createDate.slice(0, 10)}\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.assayDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testedBy\" className={classes.label}>\r\n                        Test By <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testedBy\"\r\n                        id=\"testedBy\"\r\n                        placeholder=\"Test By\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testResult\" className={classes.label}>\r\n                        Test result <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testResult\"\r\n                        id=\"testResult\"\r\n                        placeholder=\"Test result\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testResult}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"resultDate\" className={classes.label}>\r\n                        Result Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"resultDate\"\r\n                        id=\"resultDate\"\r\n                        placeholder=\"result Date\"\r\n                        min={manifestObj.createDate.slice(0, 10)}\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.resultDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  disabled={loading}\r\n                >\r\n                  Save\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddResultModal;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js",["273"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge, Spinner } from \"reactstrap\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\n\r\nimport { Card, CardBody, Table } from \"reactstrap\";\r\n\r\nlet today = new Date().toLocaleDateString(\"en-us\", {\r\n  weekday: \"long\",\r\n  year: \"numeric\",\r\n  month: \"short\",\r\n  day: \"numeric\",\r\n});\r\n\r\nconst sampleStatus = (e) => {\r\n  //console.log(e)\r\n  if (parseInt(e) === 1) {\r\n    return (\r\n      <p>\r\n        <Badge\r\n          color=\"#013220\"\r\n          style={{ backgroundColor: \"#006400\", color: \"#fff\" }}\r\n        >\r\n          Result available\r\n        </Badge>\r\n      </p>\r\n    );\r\n  } else if (parseInt(e) === 2) {\r\n    return (\r\n      <p>\r\n        <Badge color=\"danger\">Rejected</Badge>\r\n      </p>\r\n    );\r\n  } else if (parseInt(e) === 3) {\r\n    return (\r\n      <p>\r\n        <Badge color=\"info\">In-Progress</Badge>\r\n      </p>\r\n    );\r\n  } else if (parseInt(e) === 4) {\r\n    return (\r\n      <p>\r\n        <Badge color=\"warning\">Re-Run</Badge>\r\n      </p>\r\n    );\r\n  } else if (parseInt(e) === 5) {\r\n    return (\r\n      <p>\r\n        <Badge color=\"warning\">Transferred</Badge>\r\n      </p>\r\n    );\r\n  } else {\r\n    return (\r\n      <p>\r\n        <Badge color=\"dark\">Pending</Badge>\r\n      </p>\r\n    );\r\n  }\r\n};\r\n\r\nclass PrintResults extends React.Component {\r\n  render() {\r\n    const { manifestObj, results } = this.props;\r\n\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <h3 style={{ textAlign: \"center\" }}>NISRN SAMPLE RESULTS</h3>\r\n          <hr />\r\n          <Row>\r\n            <Table bordered size=\"sm\" responsive>\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\">ManifestID:</th>\r\n                  <td>{manifestObj.manifestID}</td>\r\n                  <th scope=\"row\">Facility Name:</th>\r\n                  <td>{manifestObj.sendingFacilityName}</td>\r\n                  <th scope=\"row\">Facility Id:</th>\r\n                  <td>{manifestObj.sendingFacilityID}</td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th scope=\"row\">Test Type:</th>\r\n                  <td>\r\n                    {\r\n                      <p>\r\n                        <Badge\r\n                          color=\"#014d88\"\r\n                          style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                        >\r\n                          Viral Load\r\n                        </Badge>\r\n                      </p>\r\n                    }\r\n                  </td>\r\n                  <th scope=\"row\">Receiving Lab Name:</th>\r\n                  <td>{manifestObj.receivingLabName}</td>\r\n                  <th scope=\"row\">Receiving Lab Number:</th>\r\n                  <td>{manifestObj.receivingLabID}</td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n            <br />\r\n            <Table striped bordered size=\"sm\">\r\n              <tbody>\r\n                <tr style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}>\r\n                  <th>Sample ID</th>\r\n                  <th>Approval Date</th>\r\n                  <th>Date Result Dispatched</th>\r\n                  <th>PCR Sample Number</th>\r\n                  <th>Sample Status</th>\r\n                  <th>Sample Testable</th>\r\n                  <th>Test Result</th>\r\n                  <th>Print</th>\r\n                </tr>\r\n                {\r\n                  results.length === 0\r\n                    ? \" \"\r\n                    : results.length !== 0\r\n                    ? results.map((result) => (\r\n                        <tr>\r\n                          <td>{result.sampleID}</td>\r\n                          <td>{result.approvalDate}</td>\r\n                          <td>{result.dateResultDispatched}</td>\r\n                          <td>{result.pcrLabSampleNumber}</td>\r\n                          <td>{sampleStatus(result.sampleStatus)}</td>\r\n                          <td>{result.sampleTestable}</td>\r\n                          <td>\r\n                            {result.testResult !== \"\"\r\n                              ? `${result.testResult} cp/mL`\r\n                              : \"\"}\r\n                          </td>\r\n                          {result.testResult !== \"\" ? (\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: \"/Patient-result\",\r\n                                  state: { data: result, sample: manifestObj },\r\n                                }}\r\n                              >\r\n                                <PrintIcon />\r\n                              </Link>\r\n                            </td>\r\n                          ) : (\r\n                            \" \"\r\n                          )}\r\n                        </tr>\r\n                      ))\r\n                    : manifestObj.results.map((result) => (\r\n                        <tr>\r\n                          <td>{result.sampleID}</td>\r\n                          <td>{result.approvalDate}</td>\r\n                          <td>{result.dateResultDispatched}</td>\r\n                          <td>{result.pcrLabSampleNumber}</td>\r\n                          <td>{sampleStatus(result.sampleStatus)}</td>\r\n                          <td>{result.sampleTestable}</td>\r\n                          <td>{result.testResult}</td>\r\n                          <td>\r\n                            <Link\r\n                              to={{\r\n                                pathname: \"/Patient-result\",\r\n                                state: { data: result, sample: manifestObj },\r\n                              }}\r\n                            >\r\n                              <PrintIcon />\r\n                            </Link>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                  //                    <>\r\n                  //                      <br />\r\n                  //                      <p style={{ textAlign: \"center\" }}>\r\n                  //                        No sample results available.\r\n                  //                      </p>\r\n                  //                    </>\r\n                }\r\n              </tbody>\r\n            </Table>\r\n            {/* {results.length === 0 ? (\r\n              <p>\r\n                {\" \"}\r\n                <Spinner color=\"primary\" /> Please Wait, Syncing with LIMS\r\n                server...{\" \"}\r\n              </p>\r\n            ) : (\r\n              \" \"\r\n            )} */}\r\n            <br />\r\n            <span style={{ fontSize: \"10px\" }}>LAMISPlus 2.0: {today}</span>\r\n          </Row>\r\n          <hr />\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PrintResults;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["274","275","276","277","278","279","280","281","282"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./sample.css\";\r\nimport { format } from \"date-fns\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers-pro\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers-pro/AdapterDayjs\";\r\nimport { DateRangePicker } from \"@mui/x-date-pickers-pro/DateRangePicker\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst SampleSearch = (props) => {\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [collectedSamples, setCollectedSamples] = useState([]);\r\n  const [manifestData, setManifestData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const tableRef = React.createRef();\r\n  const [config, setConfig] = useState([]);\r\n  const [value, setValue] = React.useState([null, null]);\r\n\r\n  let start_date = value[0] != null ? value[0].$d : null;\r\n  let end_date = value[1] != null ? value[1].$d : null;\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setConfig(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const loadLabTestData = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/collected-samples/?searchParam=*&pageNo=0&pageSize=100`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      //console.log(\"samples\", response);\r\n      if (response.data.records === null) {\r\n      } else {\r\n        setCollectedSamples(response.data.records);\r\n        setLoading(false);\r\n      }\r\n\r\n      localStorage.removeItem(\"samples\");\r\n      localStorage.removeItem(\"manifest\");\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching lab samples data\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const loadManifestData = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/manifests?searchParam=*&pageNo=0&pageSize=100`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      let arr = [];\r\n      if (response.data.records === null) {\r\n      } else {\r\n        response.data.records.forEach((x) => {\r\n          x.sampleInformation.forEach((y) => {\r\n            arr.push(y);\r\n          });\r\n        });\r\n      }\r\n      setManifestData(arr);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching manifest data\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(\"true\");\r\n    loadManifestData();\r\n    loadLabTestData();\r\n    loadConfig();\r\n    props.setSubmitted(1);\r\n  }, []);\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    return age_now;\r\n  };\r\n\r\n  const handleSampleChanges = (sample) => {\r\n    let samples = [];\r\n\r\n    let uniqueSamples = uniq(sample).map((item) => {\r\n      samples.push({\r\n        patientID: [\r\n          {\r\n            idNumber: item.patientId,\r\n            idTypeCode: item.typecode,\r\n          },\r\n        ],\r\n        firstName: item.firstname,\r\n        surName: item.surname,\r\n        sex: item.sex === \"M\" ? \"Male\" : \"Female\",\r\n        pregnantBreastFeedingStatus: \"\",\r\n        age: 0,\r\n        dateOfBirth: item.dob,\r\n        age: item.age,\r\n        sampleID: item.sampleId,\r\n        sampleType: item.sampleType,\r\n        indicationVLTest: 1,\r\n        artCommencementDate: \"\",\r\n        drugRegimen: \"\",\r\n        sampleOrderedBy: item.orderby,\r\n        sampleOrderDate: item.orderbydate,\r\n        sampleCollectedBy: item.collectedby,\r\n        sampleCollectionDate: item.datecollected,\r\n        sampleCollectionTime: item.timecollected,\r\n        dateSampleSent: format(new Date(), \"yyyy-MM-dd\"),\r\n        id: 0,\r\n        manifestID: 0,\r\n        pid: 0,\r\n        priority: 0,\r\n      });\r\n    });\r\n\r\n    localStorage.setItem(\"samples\", JSON.stringify(samples));\r\n  };\r\n\r\n  const sampleFilter = (collectedSamples, manifestData) => {\r\n    if (collectedSamples && manifestData) {\r\n      return collectedSamples.filter((x) => {\r\n        return !manifestData.some((y) => {\r\n          return x.sampleID === y.sampleID;\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const values = sampleFilter(collectedSamples, manifestData);\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* {collectedSamples.length <= 0 ? (\r\n        <p>\r\n          {\" \"}\r\n          <Spinner color=\"primary\" /> loading Patient Samples...\r\n        </p>\r\n      ) : (\r\n        \" \"\r\n      )} */}\r\n      <Card>\r\n        <Card.Body>\r\n          <Grid container spacing={2}>\r\n            <LocalizationProvider\r\n              dateAdapter={AdapterDayjs}\r\n              localeText={{ start: \"Start-Date\", end: \"End-Date\" }}\r\n            >\r\n              <DateRangePicker\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                  setValue(newValue);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <TextField {...startProps} />\r\n                    <Box sx={{ mx: 2 }}> to </Box>\r\n                    <TextField {...endProps} />\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n          </Grid>\r\n          <br />\r\n          <MaterialTable\r\n            icons={tableIcons}\r\n            title=\"Sample Collection List\"\r\n            tableRef={tableRef}\r\n            columns={[\r\n              { title: \"Type code\", field: \"typecode\", hidden: true },\r\n              { title: \"Hospital ID\", field: \"patientId\" },\r\n              { title: \"First Name\", field: \"firstname\", hidden: true },\r\n              { title: \"Surname\", field: \"surname\", hidden: true },\r\n              { title: \"Sex\", field: \"sex\", hidden: true },\r\n              { title: \"DOB\", field: \"dob\", hidden: true },\r\n              { title: \"Age\", field: \"age\", hidden: true },\r\n              {\r\n                title: \"Test Type\",\r\n                field: \"testType\",\r\n              },\r\n              { title: \"Sample ID\", field: \"sampleId\" },\r\n              {\r\n                title: \"Sample Type\",\r\n                field: \"sampleType\",\r\n              },\r\n              { title: \"Sample Orderby\", field: \"orderby\" },\r\n              {\r\n                title: \"Order Date\",\r\n                field: \"orderbydate\",\r\n                type: \"date\",\r\n                //hidden: true,\r\n              },\r\n              { title: \"Collected By\", field: \"collectedby\" },\r\n              {\r\n                title: \"Date Collected\",\r\n                field: \"datecollected\",\r\n                type: \"date\",\r\n                hidden: true,\r\n              },\r\n              {\r\n                title: \"Time Collected\",\r\n                field: \"timecollected\",\r\n                type: \"time\",\r\n                hidden: true,\r\n              },\r\n            ]}\r\n            isLoading={loading}\r\n            // data={handlePulledData}\r\n            data={collectedSamples\r\n              .filter((row) => {\r\n                let filterPass = true;\r\n\r\n                const date = new Date(row.sampleCollectionDate);\r\n\r\n                if (start_date != null) {\r\n                  filterPass = filterPass && new Date(start_date) <= date;\r\n                }\r\n                if (end_date != null) {\r\n                  filterPass = filterPass && new Date(end_date) >= date;\r\n                }\r\n                return filterPass;\r\n              })\r\n              .map((row) => ({\r\n                typecode: row.patientID.idTypeCode,\r\n                patientId: row.patientID.idNumber,\r\n                firstname: row.firstName,\r\n                surname: row.surName,\r\n                sex: row.sex === \"M\" ? \"Male\" : \"Female\",\r\n                dob: row.dateOfBirth,\r\n                age: calculate_age(row.dateOfBirth),\r\n                testType: \"VL\",\r\n                sampleId: row.sampleID,\r\n                sampleType: row.sampleType,\r\n                orderby: row.sampleOrderedBy,\r\n                orderbydate: row.sampleOrderDate,\r\n                collectedby: row.sampleCollectedBy,\r\n                datecollected: row.sampleCollectionDate,\r\n                timecollected: row.sampleCollectionTime,\r\n              }))}\r\n            options={{\r\n              headerStyle: {\r\n                backgroundColor: \"#014d88\",\r\n                color: \"#fff\",\r\n                fontSize: \"16px\",\r\n                padding: \"10px\",\r\n              },\r\n              searchFieldStyle: {\r\n                width: \"300%\",\r\n                margingLeft: \"250px\",\r\n              },\r\n              selection: true,\r\n              filtering: false,\r\n              exportButton: false,\r\n              searchFieldAlignment: \"left\",\r\n              pageSizeOptions: [10, 20, 100],\r\n              pageSize: 10,\r\n              debounceInterval: 400,\r\n            }}\r\n            onSelectionChange={(rows) => handleSampleChanges(rows)}\r\n            onChangePage={handleChangePage}\r\n            localization={localization}\r\n          />\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SampleSearch;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js",["283"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport ConfigModal from \"../SampleCollection/ConfigModal\";\r\nimport ProgressBar from \"../SampleCollection/Progressbar\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { toast } from \"react-toastify\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../../api\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { pcr_lab } from \"../SampleCollection/pcr\";\r\nimport DoneIcon from \"@mui/icons-material/Done\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst CreateAManifest = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [saved, setSaved] = useState(false);\r\n  const [sent, setSent] = useState(false);\r\n\r\n  const [localStore, SetLocalStore] = useState([]);\r\n  const [manifestsId, setManifestsId] = useState(0);\r\n  const [pcr_lab, setPcr_lab] = useState([]);\r\n\r\n  const [progress, setProgress] = useState(0);\r\n  const [failed, setFailed] = useState(false);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const confirmStatusSubmitted = (status) => {\r\n    props.setSubmitted(status);\r\n  };\r\n\r\n  const confirmStatusPrevious = (status) => {\r\n    props.setPrevious(status);\r\n  };\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      localStorage.setItem(\"configId\", JSON.stringify(response.data.id));\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const pcrLab = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}laboratory/get-prclabs/`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"pcrlab\", response)\r\n      if (response.data !== \"\") {\r\n        setPcr_lab(response.data);\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n    pcrLab();\r\n    const collectedSamples = JSON.parse(localStorage.getItem(\"samples\"));\r\n    if (collectedSamples) {\r\n      SetLocalStore(collectedSamples);\r\n    }\r\n  }, [loadConfig, pcrLab]);\r\n\r\n  const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\" });\r\n\r\n  const [manifestData, setManifestData] = useState({\r\n    manifestID: \"\",\r\n    manifestStatus: \"\",\r\n    sendingFacilityID: \"\",\r\n    sendingFacilityName: \"\",\r\n    receivingLabID: pcrLabCode.labNo,\r\n    receivingLabName: pcrLabCode.name,\r\n    dateScheduledForPickup: \"\",\r\n    temperatureAtPickup: \"\",\r\n    samplePackagedBy: \"\",\r\n    courierRiderName: \"\",\r\n    courierContact: \"\",\r\n    createDate: \"\",\r\n    sampleInformation: localStore,\r\n    id: 0,\r\n    uuid: \"\",\r\n  });\r\n\r\n  const [contactPhone, setContactPhone] = useState(\"\");\r\n\r\n  const checkPhoneNumber = (e) => {\r\n    setContactPhone(e);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    checkPCRLab(event.target.value);\r\n    const { name, value } = event.target;\r\n    setManifestData({\r\n      ...manifestData,\r\n      [name]: value,\r\n      receivingLabID: pcrLabCode.labNo,\r\n      receivingLabName: pcrLabCode.name,\r\n      sampleInformation: localStore,\r\n    });\r\n  };\r\n\r\n  const checkPCRLab = (name) => {\r\n    pcr_lab.forEach((val) => {\r\n      if (val.name === name) {\r\n        setPcrLabCode({ name: val.name, labNo: val.labNo });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleProgress = (progessCount) => {\r\n    setProgress(progessCount);\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.dateScheduledForPickup = manifestData.dateScheduledForPickup\r\n      ? \"\"\r\n      : \"Pick-Up date is required.\";\r\n    //    temp.temperatureAtPickup = manifestData.temperatureAtPickup\r\n    //      ? \"\"\r\n    //      : \"Temperature is required.\";\r\n    temp.receivingLabID = manifestData.receivingLabID\r\n      ? \"\"\r\n      : \"Receiving lab Id is required.\";\r\n    temp.receivingLabName = manifestData.receivingLabName\r\n      ? \"\"\r\n      : \"Receiving lab name is required.\";\r\n    temp.courierRiderName = manifestData.courierRiderName\r\n      ? \"\"\r\n      : \"Courier rider name is required.\";\r\n    temp.courierContact = manifestData.courierContact\r\n      ? \"\"\r\n      : \"Courier rider contact is required.\";\r\n    temp.samplePackagedBy = manifestData.samplePackagedBy\r\n      ? \"\"\r\n      : \"Sample packaged by is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const readyManifest = (url, id, serverId, token, timer) => {\r\n    axios\r\n      .get(`${url}lims/ready-manifests/${id}/${serverId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => {\r\n        console.log(\"ready manifests \" + resp);\r\n        if (resp) {\r\n          console.log(\"sending manifest\", resp);\r\n          handleProgress(100);\r\n\r\n          toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          confirmStatusSubmitted(2);\r\n          confirmStatusPrevious(0);\r\n          setSent(true);\r\n          setFailed(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        clearInterval(timer);\r\n        console.log(\"err\", err);\r\n        toast.error(\"Error Sending Manifest, Kindly try resending....\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          duration: 4000,\r\n        });\r\n\r\n        setSent(false);\r\n      });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      manifestData.courierContact = contactPhone;\r\n      if (validateInputs()) {\r\n        await axios\r\n          .post(`${url}lims/manifests`, manifestData, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((resp) => {\r\n            console.log(\"manifests \" + resp);\r\n            setManifestsId(resp.data.id);\r\n\r\n            setSaved(true);\r\n\r\n            manifestData.manifestID = resp.data.manifestID;\r\n            manifestData.sendingFacilityID = resp.data.sendingFacilityID;\r\n            manifestData.sendingFacilityName = resp.data.sendingFacilityName;\r\n\r\n            localStorage.setItem(\"manifest\", JSON.stringify(manifestData));\r\n            localStorage.removeItem(\"samples\");\r\n\r\n            const timer = setInterval(() => {\r\n              handleProgress((prevProgress) =>\r\n                prevProgress >= 100 ? 100 : prevProgress + 2\r\n              );\r\n            }, 500);\r\n\r\n            const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n            readyManifest(url, resp.data.id, serverId, token, timer);\r\n          });\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error saving manifest\", err);\r\n    }\r\n  };\r\n\r\n  const resendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    handleProgress(20);\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n    handleProgress(50);\r\n    await axios\r\n      .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => {\r\n        handleProgress(70);\r\n\r\n        if (resp) {\r\n          console.log(\"re sending manifest\", resp);\r\n          handleProgress(100);\r\n        }\r\n\r\n        confirmStatusSubmitted(2);\r\n        confirmStatusPrevious(0);\r\n\r\n        toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        setFailed(true);\r\n      })\r\n      .catch((err) => {\r\n        handleProgress(10);\r\n        setFailed(true);\r\n        toast.info(\"Server currently down!!! Try sending manifest later\", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          duration: 4000,\r\n        });\r\n        handleProgress(0);\r\n        // props.handleOpen();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <br />\r\n\r\n          {progress !== 0 ? (\r\n            <>\r\n              <span>Sending manifest to PCR Lab</span>\r\n              <ProgressBar value={progress} />\r\n            </>\r\n          ) : (\r\n            <Alert severity=\"info\">\r\n              <b>Tip: &nbsp;&nbsp; </b>Kindly fill the manifest form correctly\r\n              before going to the next page. &nbsp;&nbsp;&nbsp;&nbsp;\r\n            </Alert>\r\n          )}\r\n          <br />\r\n          {localStore.length === 0 ? (\r\n            <Alert\r\n              severity=\"error\"\r\n              style={{ width: \"100%\", fontSize: \"18px\", textAlign: \"center\" }}\r\n            >\r\n              <b>Manifest</b> has no sample logged. pls use the previous button\r\n              to add samples.\r\n            </Alert>\r\n          ) : (\r\n            <Form>\r\n              <Row>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"dateScheduledForPickup\"\r\n                      className={classes.label}\r\n                    >\r\n                      Date & Time <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"datetime-local\"\r\n                      max={new Date().toISOString().substr(0, 16)}\r\n                      name=\"dateScheduledForPickup\"\r\n                      id=\"dateScheduledForPickup\"\r\n                      placeholder=\"Date & Time Created\"\r\n                      className={classes.input}\r\n                      value={manifestData.dateScheduledForPickup}\r\n                      onChange={handleChange}\r\n                    />\r\n\r\n                    {errors.dateScheduledForPickup !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.dateScheduledForPickup}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"receivingLabName\" className={classes.label}>\r\n                      Receiving Lab <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      style={{\r\n                        border: \"1px solid #014d88\",\r\n                        borderRadius: \"0px\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#000\",\r\n                      }}\r\n                      name=\"receivingLabName\"\r\n                      value={pcrLabCode.name}\r\n                      id=\"receivingLabName\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <option>Select PCR Lab</option>\r\n                      {pcr_lab.map((value, i) => (\r\n                        <option key={i} value={value.name}>\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n\r\n                    {errors.receivingLabName !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.receivingLabName}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label for=\"receivingLabID\" className={classes.label}>\r\n                      Receiving Lab number{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"receivingLabID\"\r\n                      value={pcrLabCode.labNo}\r\n                      id=\"receivingLabID\"\r\n                      onChange={handleChange}\r\n                      className={classes.input}\r\n                      disabled\r\n                    />\r\n                    {errors.receivingLabID !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.receivingLabID}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"courierRiderName\" className={classes.label}>\r\n                      Courier Name <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"courierRiderName\"\r\n                      id=\"courierRiderName\"\r\n                      value={manifestData.courierRiderName}\r\n                      onChange={handleChange}\r\n                      className={classes.input}\r\n                    />\r\n                    {errors.courierRiderName !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.courierRiderName}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label for=\"courierContact\" className={classes.label}>\r\n                      Courier Contact <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <PhoneInput\r\n                      containerStyle={{\r\n                        width: \"100%\",\r\n                        border: \"1px solid #014d88\",\r\n                      }}\r\n                      inputStyle={{\r\n                        width: \"100%\",\r\n                        borderRadius: \"0px\",\r\n                        height: 44,\r\n                      }}\r\n                      country={\"ng\"}\r\n                      masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                      placeholder=\"(234)7099999999\"\r\n                      value={manifestData.courierContact}\r\n                      onChange={(e) => checkPhoneNumber(e)}\r\n                    />\r\n                    {errors.courierContact !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.courierContact}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"samplePackagedBy\" className={classes.label}>\r\n                      Sample Packaged By{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"samplePackagedBy\"\r\n                      value={manifestData.samplePackagedBy}\r\n                      id=\"samplePackagedBy\"\r\n                      onChange={handleChange}\r\n                      className={classes.input}\r\n                    />\r\n                    {errors.samplePackagedBy !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.samplePackagedBy}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"total_sample\" className={classes.label}>\r\n                      Total Sample\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"total_sample\"\r\n                      id=\"total_sample\"\r\n                      value={localStore.length}\r\n                      onChange={handleChange}\r\n                      disabled\r\n                      className={classes.input}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  {\" \"}\r\n                  <FormGroup>\r\n                    <Label for=\"test_type\" className={classes.label}>\r\n                      Test type\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"test_type\"\r\n                      id=\"test_type\"\r\n                      value=\"VL\"\r\n                      onChange={handleChange}\r\n                      disabled\r\n                      className={classes.input}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"temperatureAtPickup\" className={classes.label}>\r\n                      Temperature at pickup (°C)\r\n                    </Label>\r\n                    <Input\r\n                      type=\"number\"\r\n                      name=\"temperatureAtPickup\"\r\n                      id=\"temperatureAtPickup\"\r\n                      value={manifestData.temperatureAtPickup}\r\n                      onChange={handleChange}\r\n                      className={classes.input}\r\n                    />\r\n                    {/* {errors.temperatureAtPickup !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.temperatureAtPickup}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )} */}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              {saved === false ? (\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    startIcon={<DoneIcon />}\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Manifest Form Completed\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={<SendIcon />}\r\n                    type=\"submit\"\r\n                    onClick={resendManifest}\r\n                    disabled={failed}\r\n                  >\r\n                    Re-send\r\n                  </MatButton>{\" \"}\r\n                  <Link to={{ pathname: \"/\" }}>\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<FirstPageIcon />}\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    >\r\n                      Return Back\r\n                    </MatButton>\r\n                  </Link>\r\n                </>\r\n              )}\r\n            </Form>\r\n          )}\r\n        </CardBody>\r\n      </Card>\r\n      {open ? (\r\n        <ConfigModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestsId={manifestsId}\r\n          saved={saved}\r\n          handleProgress={handleProgress}\r\n          handleOpen={handleOpen}\r\n          submitted={confirmStatusSubmitted}\r\n          previous={confirmStatusPrevious}\r\n          setFailed={setFailed}\r\n          failed={failed}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateAManifest;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js",["284","285","286","287","288","289","290"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge, Spinner } from \"reactstrap\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport \"./result.css\";\r\nimport { logo } from \"../SampleCollection/pcr\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Table,\r\n} from \"reactstrap\";\r\n\r\nlet today = new Date().toLocaleDateString(\"en-us\", {\r\n  weekday: \"long\",\r\n  year: \"numeric\",\r\n  month: \"short\",\r\n  day: \"numeric\",\r\n});\r\n\r\nconst print = {\r\n    width: \"100%\",\r\n    borderCollapse: \"collapse\",\r\n    fontFamily: \"Arial\",\r\n    textAlign: \"left\",\r\n}\r\n\r\nclass PatientResult extends React.Component {\r\n  render() {\r\n    const { samples } = this.props;\r\n    console.log(samples);\r\n\r\n  const transferStatus = (e) => {\r\n    //console.log(e)\r\n    if (parseInt(e) === 1) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"info\">Not Transafered</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 2) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"info\">Received</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 3) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"info\">In-Progress</Badge>\r\n        </p>\r\n      );\r\n    } else if (parseInt(e) === 4) {\r\n      return (\r\n        <p>\r\n          <Badge color=\"warning\">Tested</Badge>\r\n        </p>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>\r\n          <Badge color=\"dark\">None</Badge>\r\n        </p>\r\n      );\r\n    }\r\n  };\r\n\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Row>\r\n            <Table size=\"sm\" style={ print }>\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\"></th>\r\n                  <th scope=\"row\"></th>\r\n                  <th scope=\"row\"></th>\r\n                  <th scope=\"row\">\r\n                    <h2 className=\"text-center\">\r\n                      NISRN VIRAL LOAD RESULT\r\n                    </h2>\r\n                  </th>\r\n\r\n                  <th scope=\"row\">\r\n                     <img src={logo} style={{ width: \"80px\", height: \"80px\" }} alt=\"\"/>\r\n                  </th>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </Row>\r\n          <Row>\r\n            <Table bordered size=\"sm\" responsive style={ print }>\r\n              <tbody>\r\n                 <tr>\r\n                  <th scope=\"row\">Manifest Id:</th>\r\n                  <td>{samples.manifestID}</td>\r\n                  <th scope=\"row\">Patient Name:</th>\r\n                  <td>{samples.firstName + \" \" + samples.surName}</td>\r\n                  <th scope=\"row\">Gender:</th>\r\n                  <td>{samples.sex === \"M\" ? \"Male\" : \"Female\"}</td>\r\n                </tr>\r\n                 <tr>\r\n                  <th scope=\"row\">Age:</th>\r\n                  <td>{samples.age}</td>\r\n                  <th scope=\"row\">Client Unique No:</th>\r\n                  <td>{Object.keys(samples).length !== 0 ? samples.patientID[0].idNumber : \"\"}</td>\r\n                  <th scope=\"row\">Facility Name:</th>\r\n                  <td>{samples.sendingFacilityName}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">Sample Collected by:</th>\r\n                  <td>{samples.sampleCollectedBy}</td>\r\n                  <th scope=\"row\">Date\\Time Collected:</th>\r\n                  <td>{samples.sampleCollectionDate}</td>\r\n                  <th scope=\"row\">Sample Id:</th>\r\n                  <td>{samples.sampleID}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th scope=\"row\">Sample Type:</th>\r\n                  <td>{samples.sampleType}</td>\r\n                  <th scope=\"row\">Date\\Time Ordered:</th>\r\n                  <td>{samples.sampleOrderDate}</td>\r\n                  <th scope=\"row\">Date Received at PCR:</th>\r\n                  <td>{samples.visitDate}</td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th scope=\"row\">Test Type:</th>\r\n                  <td>\r\n                    {\r\n                      <p>\r\n                        <Badge color=\"primary\">Viral Load</Badge>\r\n                      </p>\r\n                    }\r\n                  </td>\r\n                  <th scope=\"row\">Receiving Lab Name:</th>\r\n                  <td>{samples.receivingLabName}</td>\r\n                  <th scope=\"row\">Receiving Lab Number:</th>\r\n                  <td>{samples.receivingLabID}</td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n            <br />\r\n            <Table striped bordered size=\"sm\" style={ print }>\r\n              <tbody>\r\n                <tr style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}>\r\n                  <th>Transferred Out Date</th>\r\n                  <th>Transfer Status</th>\r\n                  <th>Date Result Dispatched</th>\r\n                  <th>PCR Sample Number</th>\r\n                  <th>Test Result</th>\r\n                </tr>\r\n                {\r\n                  <tr>\r\n                    <td>{samples.dateTransferredOut !== null ? samples.dateTransferredOut : \"None\"}</td>\r\n                    <td>{transferStatus(samples.transferStatus)}</td>\r\n                    <td>{samples.dateResultDispatched}</td>\r\n                    <td>{samples.pcrLabSampleNumber}</td>\r\n                    <td>{samples.testResult} Copies/mL</td>\r\n                  </tr>\r\n                }\r\n              </tbody>\r\n            </Table>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <Table bordered size=\"sm\" responsive style={ print }>\r\n              <tbody>\r\n                 <tr>\r\n                  <th scope=\"row\">Tested by: {samples.testedBy}<br />\r\n                  Date: {samples.dateResultDispatched}</th>\r\n                   <td scope=\"row\"></td>\r\n                  <th scope=\"row\">Approved by: {samples.approvedBy}<br />\r\n                    Date: {samples.approvalDate}</th>\r\n                  <td scope=\"row\"></td>\r\n                  <th scope=\"row\">Reviewed by:<br />\r\n                    Date: {today}</th>\r\n                  <th scope=\"row\">Signature</th>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n\r\n            <br />\r\n            <span style={{ fontSize: \"10px\" }}>LAMISPlus 2.0: {today}</span>\r\n          </Row>\r\n          <hr />\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PatientResult;\r\n","C:\\Users\\victor.ajor\\LAMISPLUS_PROJECTs\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["291"],"import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\r\nimport Grow from \"@mui/material/Grow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Popper from \"@mui/material/Popper\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport MenuList from \"@mui/material/MenuList\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst options = [\"Delete\", \"Edit\"];\r\n\r\nexport default function SplitActionButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        ref={anchorRef}\r\n        style={{\r\n          backgroundColor: \"rgb(153, 46, 98)\",\r\n          height: \"30px\",\r\n          width: \"150px\",\r\n        }}\r\n      >\r\n        <Link\r\n          to={props.actions[0].to}\r\n          style={{ borderRight: \"20px solid #fff !important\" }}\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleClick}\r\n            variant=\"contained\"\r\n            startIcon={props.actions[0].icon}\r\n            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n          >\r\n            <Typography variant=\"h7\" style={{ fontWeight: \"bolder\" }}>\r\n              {props.actions[0].name}\r\n            </Typography>\r\n          </Button>\r\n        </Link>\r\n\r\n        <Divider\r\n          orientation=\"vertical\"\r\n          flexItem\r\n          style={{\r\n            borderRight: \"20px solid #fff !important\",\r\n            backgroundColor: \"#fff\",\r\n            width: \"1px\",\r\n            height: \"26px\",\r\n            marginTop: \"2px\",\r\n          }}\r\n        >\r\n          1\r\n        </Divider>\r\n        <Button\r\n          size=\"medium\"\r\n          aria-controls={open ? \"split-button-menu\" : undefined}\r\n          aria-expanded={open ? \"true\" : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n          style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        >\r\n          <FaCaretDown size=\"24\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n        style={{ zIndex: \"10000\" }}\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n              zIndex: \"1000\",\r\n            }}\r\n          >\r\n            {/*width: 130,*/}\r\n            <Paper\r\n              sx={{\r\n                minWidth: \"130px\",\r\n                maxWidth: \"150px\",\r\n                marginTop: \"2px\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                  {props.actions.slice(1).map((option, index) => (\r\n                    <MenuItem key={Math.random()}>\r\n                      <Link to={option.to}>\r\n                        {option.icon}\r\n                        <span\r\n                          style={{\r\n                            color: \"rgb(153, 46, 98)\",\r\n                            fontWeight: \"bolder\",\r\n                            fontSize: \"12px\",\r\n                          }}\r\n                        >\r\n                          {option.name}\r\n                        </span>\r\n                      </Link>\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\index.js",["292"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\App.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\Home.js",["293","294","295"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js",["296","297","298","299","300","301","302"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\Result.js",["303","304","305"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js",["306","307","308","309","310"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js",["311","312","313","314","315","316","317","318","319","320","321","322","323"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["324"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js",["325","326"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js",["327","328","329"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js",["330","331","332","333","334","335","336"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js",["337"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["338","339","340","341"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js",["342"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js",["343"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["344","345","346","347","348","349","350","351","352"],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\victor.ajor\\Lamisplus_public\\LIMS_Module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["353"],{"ruleId":"354","severity":1,"message":"355","line":4,"column":41,"nodeType":"356","messageId":"357","endLine":4,"endColumn":47},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"354","severity":1,"message":"362","line":85,"column":17,"nodeType":"356","messageId":"357","endLine":85,"endColumn":25},{"ruleId":"354","severity":1,"message":"363","line":87,"column":16,"nodeType":"356","messageId":"357","endLine":87,"endColumn":23},{"ruleId":"354","severity":1,"message":"364","line":89,"column":10,"nodeType":"356","messageId":"357","endLine":89,"endColumn":16},{"ruleId":"354","severity":1,"message":"365","line":89,"column":18,"nodeType":"356","messageId":"357","endLine":89,"endColumn":27},{"ruleId":"366","severity":1,"message":"367","line":110,"column":6,"nodeType":"368","endLine":110,"endColumn":8,"suggestions":"369"},{"ruleId":"354","severity":1,"message":"370","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":20},{"ruleId":"354","severity":1,"message":"371","line":4,"column":8,"nodeType":"356","messageId":"357","endLine":4,"endColumn":24},{"ruleId":"354","severity":1,"message":"372","line":7,"column":10,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"354","severity":1,"message":"373","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":16},{"ruleId":"354","severity":1,"message":"374","line":21,"column":10,"nodeType":"356","messageId":"357","endLine":21,"endColumn":25},{"ruleId":"354","severity":1,"message":"375","line":90,"column":10,"nodeType":"356","messageId":"357","endLine":90,"endColumn":17},{"ruleId":"354","severity":1,"message":"376","line":3,"column":16,"nodeType":"356","messageId":"357","endLine":3,"endColumn":26},{"ruleId":"354","severity":1,"message":"373","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"354","severity":1,"message":"377","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":13},{"ruleId":"354","severity":1,"message":"378","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":22},{"ruleId":"354","severity":1,"message":"379","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":18},{"ruleId":"354","severity":1,"message":"380","line":16,"column":10,"nodeType":"356","messageId":"357","endLine":16,"endColumn":15},{"ruleId":"354","severity":1,"message":"381","line":26,"column":7,"nodeType":"356","messageId":"357","endLine":26,"endColumn":16},{"ruleId":"354","severity":1,"message":"382","line":1,"column":8,"nodeType":"356","messageId":"357","endLine":1,"endColumn":17},{"ruleId":"354","severity":1,"message":"383","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":12},{"ruleId":"354","severity":1,"message":"384","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":14},{"ruleId":"354","severity":1,"message":"385","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":17},{"ruleId":"354","severity":1,"message":"386","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":11},{"ruleId":"354","severity":1,"message":"387","line":10,"column":10,"nodeType":"356","messageId":"357","endLine":10,"endColumn":30},{"ruleId":"354","severity":1,"message":"388","line":11,"column":10,"nodeType":"356","messageId":"357","endLine":11,"endColumn":22},{"ruleId":"354","severity":1,"message":"389","line":12,"column":10,"nodeType":"356","messageId":"357","endLine":12,"endColumn":25},{"ruleId":"354","severity":1,"message":"390","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":20},{"ruleId":"354","severity":1,"message":"391","line":56,"column":19,"nodeType":"356","messageId":"357","endLine":56,"endColumn":29},{"ruleId":"354","severity":1,"message":"392","line":58,"column":17,"nodeType":"356","messageId":"357","endLine":58,"endColumn":25},{"ruleId":"354","severity":1,"message":"393","line":63,"column":9,"nodeType":"356","messageId":"357","endLine":63,"endColumn":23},{"ruleId":"354","severity":1,"message":"394","line":74,"column":9,"nodeType":"356","messageId":"357","endLine":74,"endColumn":21},{"ruleId":"395","severity":1,"message":"396","line":162,"column":66,"nodeType":"397","messageId":"398","endLine":162,"endColumn":67,"suggestions":"399"},{"ruleId":"354","severity":1,"message":"400","line":90,"column":10,"nodeType":"356","messageId":"357","endLine":90,"endColumn":17},{"ruleId":"354","severity":1,"message":"401","line":91,"column":9,"nodeType":"356","messageId":"357","endLine":91,"endColumn":18},{"ruleId":"354","severity":1,"message":"402","line":95,"column":10,"nodeType":"356","messageId":"357","endLine":95,"endColumn":18},{"ruleId":"354","severity":1,"message":"403","line":118,"column":13,"nodeType":"356","messageId":"357","endLine":118,"endColumn":17},{"ruleId":"354","severity":1,"message":"404","line":107,"column":9,"nodeType":"356","messageId":"357","endLine":107,"endColumn":16},{"ruleId":"366","severity":1,"message":"405","line":137,"column":6,"nodeType":"368","endLine":137,"endColumn":8,"suggestions":"406"},{"ruleId":"354","severity":1,"message":"375","line":85,"column":10,"nodeType":"356","messageId":"357","endLine":85,"endColumn":17},{"ruleId":"354","severity":1,"message":"391","line":108,"column":19,"nodeType":"356","messageId":"357","endLine":108,"endColumn":29},{"ruleId":"354","severity":1,"message":"400","line":109,"column":10,"nodeType":"356","messageId":"357","endLine":109,"endColumn":17},{"ruleId":"354","severity":1,"message":"401","line":110,"column":9,"nodeType":"356","messageId":"357","endLine":110,"endColumn":18},{"ruleId":"354","severity":1,"message":"407","line":3,"column":17,"nodeType":"356","messageId":"357","endLine":3,"endColumn":24},{"ruleId":"354","severity":1,"message":"377","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":13},{"ruleId":"354","severity":1,"message":"407","line":8,"column":10,"nodeType":"356","messageId":"357","endLine":8,"endColumn":17},{"ruleId":"354","severity":1,"message":"370","line":36,"column":10,"nodeType":"356","messageId":"357","endLine":36,"endColumn":20},{"ruleId":"354","severity":1,"message":"408","line":68,"column":10,"nodeType":"356","messageId":"357","endLine":68,"endColumn":16},{"ruleId":"366","severity":1,"message":"409","line":145,"column":6,"nodeType":"368","endLine":145,"endColumn":8,"suggestions":"410"},{"ruleId":"354","severity":1,"message":"411","line":157,"column":9,"nodeType":"356","messageId":"357","endLine":157,"endColumn":22},{"ruleId":"412","severity":1,"message":"413","line":157,"column":49,"nodeType":"414","messageId":"415","endLine":157,"endColumn":51},{"ruleId":"416","severity":1,"message":"417","line":171,"column":9,"nodeType":"418","messageId":"419","endLine":171,"endColumn":12},{"ruleId":"354","severity":1,"message":"420","line":203,"column":9,"nodeType":"356","messageId":"357","endLine":203,"endColumn":15},{"ruleId":"354","severity":1,"message":"421","line":92,"column":10,"nodeType":"356","messageId":"357","endLine":92,"endColumn":14},{"ruleId":"354","severity":1,"message":"422","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"407","line":3,"column":17,"nodeType":"356","messageId":"357","endLine":3,"endColumn":24},{"ruleId":"354","severity":1,"message":"423","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":17},{"ruleId":"354","severity":1,"message":"424","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":17},{"ruleId":"354","severity":1,"message":"373","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"425","severity":1,"message":"426","line":180,"column":24,"nodeType":"427","endLine":180,"endColumn":35},{"ruleId":"425","severity":1,"message":"426","line":183,"column":23,"nodeType":"427","endLine":183,"endColumn":34},{"ruleId":"354","severity":1,"message":"428","line":21,"column":25,"nodeType":"356","messageId":"357","endLine":21,"endColumn":41},{"ruleId":"354","severity":1,"message":"355","line":4,"column":41,"nodeType":"356","messageId":"357","endLine":4,"endColumn":47},{"ruleId":"354","severity":1,"message":"370","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":20},{"ruleId":"354","severity":1,"message":"371","line":4,"column":8,"nodeType":"356","messageId":"357","endLine":4,"endColumn":24},{"ruleId":"354","severity":1,"message":"372","line":7,"column":10,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"354","severity":1,"message":"376","line":3,"column":16,"nodeType":"356","messageId":"357","endLine":3,"endColumn":26},{"ruleId":"354","severity":1,"message":"373","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"354","severity":1,"message":"377","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":13},{"ruleId":"354","severity":1,"message":"378","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":22},{"ruleId":"354","severity":1,"message":"379","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":18},{"ruleId":"354","severity":1,"message":"380","line":16,"column":10,"nodeType":"356","messageId":"357","endLine":16,"endColumn":15},{"ruleId":"354","severity":1,"message":"381","line":26,"column":7,"nodeType":"356","messageId":"357","endLine":26,"endColumn":16},{"ruleId":"354","severity":1,"message":"373","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":16},{"ruleId":"354","severity":1,"message":"374","line":21,"column":10,"nodeType":"356","messageId":"357","endLine":21,"endColumn":25},{"ruleId":"354","severity":1,"message":"375","line":90,"column":10,"nodeType":"356","messageId":"357","endLine":90,"endColumn":17},{"ruleId":"354","severity":1,"message":"362","line":85,"column":17,"nodeType":"356","messageId":"357","endLine":85,"endColumn":25},{"ruleId":"354","severity":1,"message":"363","line":87,"column":16,"nodeType":"356","messageId":"357","endLine":87,"endColumn":23},{"ruleId":"354","severity":1,"message":"364","line":89,"column":10,"nodeType":"356","messageId":"357","endLine":89,"endColumn":16},{"ruleId":"354","severity":1,"message":"365","line":89,"column":18,"nodeType":"356","messageId":"357","endLine":89,"endColumn":27},{"ruleId":"366","severity":1,"message":"367","line":110,"column":6,"nodeType":"368","endLine":110,"endColumn":8,"suggestions":"429"},{"ruleId":"354","severity":1,"message":"383","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":12},{"ruleId":"354","severity":1,"message":"384","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":14},{"ruleId":"354","severity":1,"message":"385","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":17},{"ruleId":"354","severity":1,"message":"386","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":11},{"ruleId":"354","severity":1,"message":"387","line":10,"column":10,"nodeType":"356","messageId":"357","endLine":10,"endColumn":30},{"ruleId":"354","severity":1,"message":"388","line":11,"column":10,"nodeType":"356","messageId":"357","endLine":11,"endColumn":22},{"ruleId":"354","severity":1,"message":"389","line":12,"column":10,"nodeType":"356","messageId":"357","endLine":12,"endColumn":25},{"ruleId":"354","severity":1,"message":"390","line":13,"column":8,"nodeType":"356","messageId":"357","endLine":13,"endColumn":20},{"ruleId":"354","severity":1,"message":"391","line":56,"column":19,"nodeType":"356","messageId":"357","endLine":56,"endColumn":29},{"ruleId":"354","severity":1,"message":"392","line":58,"column":17,"nodeType":"356","messageId":"357","endLine":58,"endColumn":25},{"ruleId":"354","severity":1,"message":"393","line":63,"column":9,"nodeType":"356","messageId":"357","endLine":63,"endColumn":23},{"ruleId":"354","severity":1,"message":"394","line":74,"column":9,"nodeType":"356","messageId":"357","endLine":74,"endColumn":21},{"ruleId":"395","severity":1,"message":"396","line":162,"column":66,"nodeType":"397","messageId":"398","endLine":162,"endColumn":67,"suggestions":"430"},{"ruleId":"354","severity":1,"message":"375","line":85,"column":10,"nodeType":"356","messageId":"357","endLine":85,"endColumn":17},{"ruleId":"354","severity":1,"message":"404","line":107,"column":9,"nodeType":"356","messageId":"357","endLine":107,"endColumn":16},{"ruleId":"366","severity":1,"message":"405","line":137,"column":6,"nodeType":"368","endLine":137,"endColumn":8,"suggestions":"431"},{"ruleId":"354","severity":1,"message":"391","line":108,"column":19,"nodeType":"356","messageId":"357","endLine":108,"endColumn":29},{"ruleId":"354","severity":1,"message":"400","line":109,"column":10,"nodeType":"356","messageId":"357","endLine":109,"endColumn":17},{"ruleId":"354","severity":1,"message":"401","line":110,"column":9,"nodeType":"356","messageId":"357","endLine":110,"endColumn":18},{"ruleId":"354","severity":1,"message":"422","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"407","line":3,"column":17,"nodeType":"356","messageId":"357","endLine":3,"endColumn":24},{"ruleId":"354","severity":1,"message":"423","line":5,"column":8,"nodeType":"356","messageId":"357","endLine":5,"endColumn":17},{"ruleId":"354","severity":1,"message":"424","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":17},{"ruleId":"354","severity":1,"message":"373","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":16},{"ruleId":"425","severity":1,"message":"426","line":180,"column":24,"nodeType":"427","endLine":180,"endColumn":35},{"ruleId":"425","severity":1,"message":"426","line":183,"column":23,"nodeType":"427","endLine":183,"endColumn":34},{"ruleId":"354","severity":1,"message":"407","line":3,"column":17,"nodeType":"356","messageId":"357","endLine":3,"endColumn":24},{"ruleId":"354","severity":1,"message":"400","line":90,"column":10,"nodeType":"356","messageId":"357","endLine":90,"endColumn":17},{"ruleId":"354","severity":1,"message":"401","line":91,"column":9,"nodeType":"356","messageId":"357","endLine":91,"endColumn":18},{"ruleId":"354","severity":1,"message":"402","line":95,"column":10,"nodeType":"356","messageId":"357","endLine":95,"endColumn":18},{"ruleId":"354","severity":1,"message":"403","line":118,"column":13,"nodeType":"356","messageId":"357","endLine":118,"endColumn":17},{"ruleId":"354","severity":1,"message":"382","line":1,"column":8,"nodeType":"356","messageId":"357","endLine":1,"endColumn":17},{"ruleId":"354","severity":1,"message":"421","line":92,"column":10,"nodeType":"356","messageId":"357","endLine":92,"endColumn":14},{"ruleId":"354","severity":1,"message":"377","line":6,"column":8,"nodeType":"356","messageId":"357","endLine":6,"endColumn":13},{"ruleId":"354","severity":1,"message":"407","line":8,"column":10,"nodeType":"356","messageId":"357","endLine":8,"endColumn":17},{"ruleId":"354","severity":1,"message":"370","line":36,"column":10,"nodeType":"356","messageId":"357","endLine":36,"endColumn":20},{"ruleId":"354","severity":1,"message":"408","line":68,"column":10,"nodeType":"356","messageId":"357","endLine":68,"endColumn":16},{"ruleId":"366","severity":1,"message":"409","line":145,"column":6,"nodeType":"368","endLine":145,"endColumn":8,"suggestions":"432"},{"ruleId":"354","severity":1,"message":"411","line":157,"column":9,"nodeType":"356","messageId":"357","endLine":157,"endColumn":22},{"ruleId":"412","severity":1,"message":"413","line":157,"column":49,"nodeType":"414","messageId":"415","endLine":157,"endColumn":51},{"ruleId":"416","severity":1,"message":"417","line":171,"column":9,"nodeType":"418","messageId":"419","endLine":171,"endColumn":12},{"ruleId":"354","severity":1,"message":"420","line":203,"column":9,"nodeType":"356","messageId":"357","endLine":203,"endColumn":15},{"ruleId":"354","severity":1,"message":"428","line":21,"column":25,"nodeType":"356","messageId":"357","endLine":21,"endColumn":41},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["433"],"no-negated-in-lhs",["434"],"'setSaved' is assigned a value but never used.","'setSend' is assigned a value but never used.","'failed' is assigned a value but never used.","'setFailed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.","ArrayExpression",["435"],"'makeStyles' is defined but never used.","'SampleCollection' is defined but never used.","'labObj' is defined but never used.","'HomeIcon' is defined but never used.","'useReactToPrint' is defined but never used.","'loading' is assigned a value but never used.","'useHistory' is defined but never used.","'Alert' is defined but never used.","'AddResultModal' is defined but never used.","'CachedIcon' is defined but never used.","'toast' is defined but never used.","'useStyles' is assigned a value but never used.","'PropTypes' is defined but never used.","'Grid' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Box' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDayjs' is defined but never used.","'DateRangePicker' is defined but never used.","'DownloadIcon' is defined but never used.","'setLoading' is assigned a value but never used.","'setValue' is assigned a value but never used.","'handleDownload' is assigned a value but never used.","'sampleStatus' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\m.","TemplateElement","unnecessaryEscape",["436","437"],"'visible' is assigned a value but never used.","'onDismiss' is assigned a value but never used.","'configId' is assigned a value but never used.","'name' is assigned a value but never used.","'classes' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["438"],"'Spinner' is defined but never used.","'config' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadConfig', 'loadLabTestData', 'loadManifestData', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["439"],"'uniqueSamples' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'age'.","ObjectExpression","unexpected","'values' is assigned a value but never used.","'sent' is assigned a value but never used.","'Link' is defined but never used.","'PrintIcon' is defined but never used.","'MatButton' is defined but never used.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'setSelectedIndex' is assigned a value but never used.",["440"],["441","442"],["443"],["444"],"no-global-assign","no-unsafe-negation",{"desc":"445","fix":"446"},{"messageId":"447","fix":"448","desc":"449"},{"messageId":"450","fix":"451","desc":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"445","fix":"457"},{"messageId":"447","fix":"458","desc":"449"},{"messageId":"450","fix":"459","desc":"452"},{"desc":"453","fix":"460"},{"desc":"455","fix":"461"},"Update the dependencies array to be: [sampleObj]",{"range":"462","text":"463"},"removeEscape",{"range":"464","text":"465"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"466","text":"467"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [props]",{"range":"468","text":"469"},"Update the dependencies array to be: [loadConfig, loadLabTestData, loadManifestData, props]",{"range":"470","text":"471"},{"range":"472","text":"463"},{"range":"473","text":"465"},{"range":"474","text":"467"},{"range":"475","text":"469"},{"range":"476","text":"471"},[2830,2832],"[sampleObj]",[6253,6254],"",[6253,6253],"\\",[4658,4660],"[props]",[5647,5649],"[loadConfig, loadLabTestData, loadManifestData, props]",[2830,2832],[6253,6254],[6253,6253],[4658,4660],[5647,5649]]